let THREE,Patients,OrbitControls,EffectComposer,RenderPass,UnrealBloomPass,BokehPass;_40e‍.w("../node_modules/three/build/three.js",[["*",null,function(v){THREE=v}]]);_40e‍.w("./Patient.js",[["Patients",["Patients"],function(v){Patients=v}]]);_40e‍.w("../node_modules/three/examples/jsm/controls/OrbitControls.js",[["OrbitControls",["OrbitControls"],function(v){OrbitControls=v}]]);_40e‍.w("../node_modules/three/examples/jsm/postprocessing/EffectComposer.js",[["EffectComposer",["EffectComposer"],function(v){EffectComposer=v}]]);_40e‍.w("../node_modules/three/examples/jsm/postprocessing/RenderPass.js",[["RenderPass",["RenderPass"],function(v){RenderPass=v}]]);_40e‍.w("../node_modules/three/examples/jsm/postprocessing/UnrealBloomPass.js",[["UnrealBloomPass",["UnrealBloomPass"],function(v){UnrealBloomPass=v}]]);_40e‍.w("../node_modules/three/examples/jsm/postprocessing/BokehPass.js",[["BokehPass",["BokehPass"],function(v){BokehPass=v}]]);



// import Stats from '../node_modules/three/examples/jsm/libs/stats.module.js';




var express = require('express');
var app = express();
var path = require('path');

// viewed at http://localhost:8080
app.get('/', function(req, res) {
    res.sendFile(path.join(__dirname + '/index.html'));
});

app.listen(8080);


var camera, renderer, prevMouse;
var raycaster = new THREE.Raycaster();
var mouse = new THREE.Vector2(-10, -10);
var scene = new THREE.Scene();
var nodeGraph = new THREE.Object3D();
var allPatients = new Patients(nodeGraph);
var currentDateId=1;

var composer; // mixer, stats,;
var params = {
    exposure: 1,
    bloomStrength: 1.2,
    bloomThreshold: 0.2,
    bloomRadius: 1
};
// stats = new Stats();

var bloomPass = new UnrealBloomPass( new THREE.Vector2( window.innerWidth, window.innerHeight ), 1.5, 0.4, 0.85 );
bloomPass.threshold = params.bloomThreshold;
bloomPass.strength = params.bloomStrength;
bloomPass.radius = params.bloomRadius;

$(document).ready(() => {
    init();}
);

function init(){
    const gw = $('#graph').width();
    const gh = $('#graph').height();

    window.addEventListener( 'resize', onWindowResize, false );
    $('#graph').mousemove(onDocumentMouseMove);
    camera = new THREE.PerspectiveCamera(60, gw / gh, 0.1, 1000);
    camera.position.set(0, 0, 6); 

    renderer = new THREE.WebGLRenderer();
    renderer.setSize(gw, gh);
    $('#next').click(toNext);
    $('#prev').click(toPrev);
    var renderScene = new RenderPass( scene, camera );
    var bokehPass = new BokehPass( scene, camera, {
        focus: 1.0,
        aperture:	10.5,
        maxblur:	3.0,
    
        width: gw,
        height: gh
    } );
    composer = new EffectComposer( renderer );
    composer.addPass( renderScene );
    composer.addPass( bokehPass );
    composer.addPass( bloomPass );
    toNext();
    let controls = new OrbitControls(camera, renderer.domElement);
    controls.update();
    scene.add(nodeGraph);

    $('#graph').append(renderer.domElement);

    function animate() {
        requestAnimationFrame(animate);
        nodeGraph.rotation.y += 0.001;
        // mixer.update( delta );
   //     stats.update();
        composer.render();
        raycaster.setFromCamera( mouse, camera );
        var intersects = raycaster.intersectObjects( nodeGraph.children );
        for ( let i = 0; i < intersects.length; i++ ) {
            for (let j = 0; j< allPatients.allPatients.length; j++) {
                if (intersects[i].object.uuid == allPatients.allPatients[j].geom.uuid) {
                    let currMouse = allPatients.allPatients[j];
                    if (currMouse != prevMouse) {
                        updatePatientData(currMouse);
                        prevMouse = currMouse;
                    }
                }                
            }
        }

        controls.update();
    //    renderer.render(scene, camera);
    };

    animate();
}

function onWindowResize(){

    const gw = $('#graph').width();
    const gh = $('#graph').height();

    camera.aspect = gw / gh;
    camera.updateProjectionMatrix();
    composer.setSize( gw, gh );
    renderer.setSize( gw, gh );
}

function createDailyData(obj) {
    const months = {'01':'January', '02': 'February','03': 'March', '04': 'April'};
    let currDateData = [];
    currDateData.push('<b>Total Cases: </b>' + obj['totalCases']);
    currDateData.push('<b>New Cases:</b> ' + obj['newCases']);
    currDateData.push('<b>Discharged: </b>' + obj['totalRecovered']);
    currDateData.push('<b>ICU: </b>' + obj['icu']);
    
    let date = obj['date'].split('/');
    let currMonth = months[date[1]];
    $('#dateData').html(`<h1>${date[0]} ${currMonth} 2020</h1>  <br> ${currDateData.join("<br>")}`);

    $('#news').html(`<h2>${obj['news']['headline']}</h2><p>${obj['news']['para']}</p>`); 

    let dict = obj['social media'];
    let platform = dict['platform'];
    let username = dict['username'];
    let comment = dict['comment'];
    let link = dict['link'];

    $('#sm').html(`From <a href = "${link}">${platform}</a><br><h3>${username}</h3><br>${comment}`);
  
}

function toNext() {

    $.getJSON('data/covidData_mar30.json', function(json){
        allPatients.data = json;
        if (currentDateId == Object.keys(json).length + 1) {
            return
        }

        $('#news').empty();
        $('#sm').empty();
        $('#dateData').empty();
    
        let currDate = json[currentDateId];

        //loop thru keys in JSON object
        if (currDate['totalCases'] > allPatients.allPatients.length) {
            for (const key of Object.keys(currDate['cases'])) { 
                allPatients.addPatient(currentDateId, key, currDate['cases'][key], nodeGraph);
                }
        }

        allPatients.display(currentDateId);
        currentDateId += 1;
        
        createDailyData(currDate);     
    });

}

function toPrev() {
    if (currentDateId==2) {
        return
    }
    currentDateId-= 2;
    toNext();
}

function onDocumentMouseMove(event) {
    event.preventDefault();
    let w = window.innerWidth;
    let h = window.innerHeight;
    mouse.x = ((event.clientX - 0.18*w) / (0.635*w)) * 2 - 1;
    mouse.y = -(event.clientY / (0.7*h)) * 2 + 1;
}

function updatePatientData(ptnt) {
    let ptntData = [];
    ptntData.push(`Case Number: ${ptnt.caseNumber}`);
    ptntData.push(`Age: ${ptnt.age}`);
    ptntData.push(`Gender: ${ptnt.gender}`);
    ptntData.push(`Hospital: ${ptnt.hosp}`);
    $('#ptntData').html(ptntData.join('<br>'));
}
